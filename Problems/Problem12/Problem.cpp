/* 
 * Project Euler Implementation
 *
 * Author:  Brendan Bates
 * Website: http://www.brendan-bates.com
 * Email:   me@brendan-bates.com
 * License: Apache License, Version 2.0 (See LICENSE file for details)
 *
 */

/*********************
 * PROBLEM #12 
 *********************/

/*

The sequence of triangle numbers is generated by adding the natural numbers. So 
the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten 
terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

*/

#include <cstring>
#include <stdio.h>
#include "../AbstractProblem.h"
#include "Problem.h"

FACTORY(Problem12)

Problem12::Problem12()
{
    this->ProblemName = new std::string("Highly divisible triangular number");
    this->ProblemNumber = 12;
}

void Problem12::Execute()
{
    uint64_t sum = 0, factors = 0, triangle = 0;
    
    while(factors < this->input)
    {
        sum += ++triangle;
        factors = this->ProjectFunctions->CountFactors(sum);
    }
    
    this->answer = sum;
}

void Problem12::GetAnswer()
{
    printf("Answer: %llu\r\n", this->answer);
}

void Problem12::GetInputs()
{
    this->ProjectFunctions->GetInput(&this->input, 500, "number of divisors");
}